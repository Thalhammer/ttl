#include <gtest/gtest.h>

#include "include/ttl/io/zip_reader.h"

using thalhammer::io::zip_reader;
using thalhammer::io::zip_entry;

static unsigned char test_zip[] = {
	0x50, 0x4b, 0x03, 0x04, 0x14, 0x00, 0x08, 0x08, 0x00, 0x00, 0xfd, 0x80,
	0x4d, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74,
	0x78, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x50, 0x4b, 0x07, 0x08, 0x56, 0xb1, 0x17, 0x4a, 0x0b, 0x00, 0x00,
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x50, 0x4b, 0x03, 0x04, 0x14, 0x00, 0x00,
	0x08, 0x00, 0x00, 0xfd, 0x80, 0x4d, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x4b, 0x03, 0x04,
	0x14, 0x00, 0x00, 0x08, 0x00, 0x00, 0xfd, 0x80, 0x4d, 0x4c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00,
	0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e, 0x74, 0x78, 0x74, 0x50,
	0x4b, 0x01, 0x02, 0x14, 0x00, 0x14, 0x00, 0x08, 0x08, 0x00, 0x00, 0xfd,
	0x80, 0x4d, 0x4c, 0x56, 0xb1, 0x17, 0x4a, 0x0b, 0x00, 0x00, 0x00, 0x0b,
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x74, 0x78, 0x74, 0x50, 0x4b, 0x01, 0x02, 0x14, 0x00, 0x14,
	0x00, 0x00, 0x08, 0x00, 0x00, 0xfd, 0x80, 0x4d, 0x4c, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x41,
	0x00, 0x00, 0x00, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x50, 0x4b, 0x01, 0x02, 0x14, 0x00, 0x14, 0x00, 0x00, 0x08, 0x00, 0x00,
	0xfd, 0x80, 0x4d, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x74, 0x65,
	0x73, 0x74, 0x32, 0x2e, 0x74, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x4b, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
	0x03, 0x00, 0xab, 0x00, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00
};
static unsigned char test_zip_2[] = {
	0x50, 0x4b, 0x03, 0x04, 0x14, 0x00, 0x08, 0x08, 0x08, 0x00, 0xfd, 0x80,
	0x4d, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e,
	0x74, 0x78, 0x74, 0xf3, 0x48, 0xcd, 0xc9, 0xc9, 0x57, 0x08, 0xcf, 0x2f,
	0xca, 0x49, 0x01, 0x00, 0x50, 0x4b, 0x07, 0x08, 0x56, 0xb1, 0x17, 0x4a,
	0x0d, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x50, 0x4b, 0x01, 0x02,
	0x14, 0x00, 0x14, 0x00, 0x08, 0x08, 0x08, 0x00, 0xfd, 0x80, 0x4d, 0x4c,
	0x56, 0xb1, 0x17, 0x4a, 0x0d, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e,
	0x74, 0x78, 0x74, 0x50, 0x4b, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x01, 0x00, 0x37, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00,
	0x00
};

TEST(ZipReaderTest, ReadZip) {
	const time_t time = 1518538020;

	zip_reader rdr(test_zip, sizeof(test_zip));

	/*{
		zip_entry f;
		f.set_name("test.txt");
		f.set_last_modified(time);
		std::string content = "Hello World";
		std::istringstream ss(content);
		zip.add_entry(f, ss);
	}
	{
		zip_entry e;
		e.set_name("Directory");
		e.set_last_modified(time);
		e.set_directory(true);
		zip.add_entry(e);
	}
	{
		zip_entry entry;
		entry.set_name("test2.txt");
		entry.set_comment("Comment");
		entry.set_last_modified(time);
		zip.add_entry(entry);
	}
	ASSERT_THROW([&]() {
		zip_entry entry;
		entry.set_name("test3.txt");
		entry.set_last_modified(time);
		entry.set_compressed(true);
		std::string content = "Hello World";
		std::istringstream ss(content);
		zip.add_entry(entry, ss);
	}(), std::exception);
	zip.finish();

	std::string check((char*)test_zip, sizeof(test_zip));
	ASSERT_EQ(check, file.str());*/
}
/*
TEST(ZipStreamTest, WriteZipCompressed) {
	const time_t time = 1518538020;

	std::ostringstream file;
	zip_stream<true> zip(file);

	if (0) {
		zip_entry f;
		f.set_name("test.txt");
		f.set_last_modified(time);
		f.set_compressed(false);
		std::string content = "Hello World";
		std::istringstream ss(content);
		zip.add_entry(f, ss);
	}
	{
		zip_entry f;
		f.set_name("test2.txt");
		f.set_last_modified(time);
		f.set_compressed(true);
		std::string content = "Hello World";
		std::istringstream ss(content);
		zip.add_entry(f, ss);
	}
	zip.finish();

	std::string check((char*)test_zip_2, sizeof(test_zip_2));
	ASSERT_EQ(check, file.str());
}
*/