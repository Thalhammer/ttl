#include <gtest/gtest.h>

#include "include/ttl/io/zip_reader.h"

using thalhammer::io::zip_reader;
using thalhammer::io::zip_entry;

static unsigned char test_zip[] = {
	0x50, 0x4b, 0x03, 0x04, 0x14, 0x00, 0x08, 0x08, 0x00, 0x00, 0xfd, 0x80,
	0x4d, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74,
	0x78, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x50, 0x4b, 0x07, 0x08, 0x56, 0xb1, 0x17, 0x4a, 0x0b, 0x00, 0x00,
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x50, 0x4b, 0x03, 0x04, 0x14, 0x00, 0x00,
	0x08, 0x00, 0x00, 0xfd, 0x80, 0x4d, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x4b, 0x03, 0x04,
	0x14, 0x00, 0x00, 0x08, 0x00, 0x00, 0xfd, 0x80, 0x4d, 0x4c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00,
	0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e, 0x74, 0x78, 0x74, 0x50,
	0x4b, 0x01, 0x02, 0x14, 0x00, 0x14, 0x00, 0x08, 0x08, 0x00, 0x00, 0xfd,
	0x80, 0x4d, 0x4c, 0x56, 0xb1, 0x17, 0x4a, 0x0b, 0x00, 0x00, 0x00, 0x0b,
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x74, 0x78, 0x74, 0x50, 0x4b, 0x01, 0x02, 0x14, 0x00, 0x14,
	0x00, 0x00, 0x08, 0x00, 0x00, 0xfd, 0x80, 0x4d, 0x4c, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x41,
	0x00, 0x00, 0x00, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x50, 0x4b, 0x01, 0x02, 0x14, 0x00, 0x14, 0x00, 0x00, 0x08, 0x00, 0x00,
	0xfd, 0x80, 0x4d, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x74, 0x65,
	0x73, 0x74, 0x32, 0x2e, 0x74, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x4b, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
	0x03, 0x00, 0xab, 0x00, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00
};
static unsigned char test_zip_2[] = {
	0x50, 0x4b, 0x03, 0x04, 0x14, 0x00, 0x08, 0x08, 0x08, 0x00, 0xfd, 0x80,
	0x4d, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e,
	0x74, 0x78, 0x74, 0xf3, 0x48, 0xcd, 0xc9, 0xc9, 0x57, 0x08, 0xcf, 0x2f,
	0xca, 0x49, 0x01, 0x00, 0x50, 0x4b, 0x07, 0x08, 0x56, 0xb1, 0x17, 0x4a,
	0x0d, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x50, 0x4b, 0x01, 0x02,
	0x14, 0x00, 0x14, 0x00, 0x08, 0x08, 0x08, 0x00, 0xfd, 0x80, 0x4d, 0x4c,
	0x56, 0xb1, 0x17, 0x4a, 0x0d, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e,
	0x74, 0x78, 0x74, 0x50, 0x4b, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x01, 0x00, 0x37, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00,
	0x00
};

TEST(ZipReaderTest, ReadZip) {
	const time_t time = 1518538078;

	zip_reader rdr(test_zip, sizeof(test_zip));
	ASSERT_EQ(3, rdr.get_num_entries());

	auto idx1 = rdr.find_by_path("test.txt");
	ASSERT_EQ(0, idx1);
	auto& f1 = rdr.get_entry(idx1);
	ASSERT_EQ("test.txt", f1.get_name());
	ASSERT_EQ(time, f1.get_last_modified());
	ASSERT_EQ("", f1.get_comment());
	ASSERT_FALSE(f1.is_directory());

	auto idx2 = rdr.find_by_path("Directory");
	ASSERT_EQ(1, idx2);
	auto& f2 = rdr.get_entry(idx2);
	ASSERT_EQ("Directory", f2.get_name());
	ASSERT_EQ(time, f2.get_last_modified());
	ASSERT_EQ("", f2.get_comment());
	ASSERT_TRUE(f2.is_directory());

	auto idx3 = rdr.find_by_path("test2.txt");
	ASSERT_EQ(2, idx3);
	auto& f3 = rdr.get_entry(idx3);
	ASSERT_EQ("test2.txt", f3.get_name());
	ASSERT_EQ(time, f3.get_last_modified());
	ASSERT_EQ("Comment", f3.get_comment());
	ASSERT_FALSE(f3.is_directory());
}

static std::string get_all(std::istream& is) {
	std::ostringstream ss;
	ss << is.rdbuf();
	return ss.str();
}

TEST(ZipReaderTest, ReadZipContentUncompressed) {
	zip_reader rdr(test_zip, sizeof(test_zip));
	ASSERT_EQ(3, rdr.get_num_entries());

	auto idx = rdr.find_by_path("test.txt");
	ASSERT_EQ(0, idx);
	auto& ftest = rdr.get_entry(idx);
	auto pstrm = ftest.open_stream();
	ASSERT_EQ("Hello World", get_all(*pstrm));
}

TEST(ZipReaderTest, ReadZipContentCompressed) {
	zip_reader rdr(test_zip_2, sizeof(test_zip_2));
	ASSERT_EQ(1, rdr.get_num_entries());

	auto idx = rdr.find_by_path("test2.txt");
	ASSERT_EQ(0, idx);
	auto& ftest = rdr.get_entry(idx);
	auto pstrm = ftest.open_stream();
	ASSERT_EQ("Hello World", get_all(*pstrm));
}